# -*- coding: utf-8 -*-
"""stockscreener13

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H_ZgOcxL4i_aOmeybts9vjZPNNbYtTJS
"""

# Move set_page_config to the absolute first line
import streamlit as st

st.set_page_config(page_title="Stock Screener", layout="centered")  # ✅ First Streamlit command

import finnhub
from datetime import datetime
import time

# ✅ Set API Key Directly
API_KEY = "csvg4d9r01qq28mn68mgcsvg4d9r01qq28mn68n0"  # Your API Key

# ✅ Finnhub Client Initialization
try:
    finnhub_client = finnhub.Client(api_key=API_KEY)
except Exception as e:
    st.error(f"❌ API Initialization Failed: {str(e)}")
    st.stop()

st.title("📈 Mobile Stock Screener")

# 🔹 User Inputs
selected_stocks = st.text_input("Enter stock symbols (comma-separated)", "AAPL,GOOGL,TSLA").upper().strip()
time_frame = st.slider("Time frame (seconds)", 10, 200, 60)
percentage_change_threshold = st.slider("Alert Threshold (%)", 0.1, 5.0, 1.0)

# ✅ Ensure at least one valid stock symbol is provided
if not selected_stocks:
    st.error("⚠️ Please enter at least one valid stock symbol.")
    st.stop()

# 🔹 Monitoring State Management
if "monitoring" not in st.session_state:
    st.session_state.monitoring = False
if "price_data" not in st.session_state:
    st.session_state.price_data = {}
if "alerts" not in st.session_state:
    st.session_state.alerts = set()

# ✅ Start / Stop Buttons
if st.button("▶ Start Monitoring"):
    st.session_state.monitoring = True
    st.session_state.price_data = {ticker.strip(): [] for ticker in selected_stocks.split(",")}
    st.session_state.alerts.clear()

if st.button("⏹ Stop Monitoring"):
    st.session_state.monitoring = False

if st.button("🧹 Clear Alerts"):
    st.session_state.alerts.clear()

# ✅ Function to Fetch Stock Prices
def get_stock_prices(tickers):
    prices = {}
    for ticker in tickers:
        try:
            quote = finnhub_client.quote(ticker)
            if quote and 'c' in quote and quote['c'] is not None:
                prices[ticker] = quote['c']
            else:
                st.error(f"⚠️ {ticker}: No valid price data.")
                prices[ticker] = None
        except Exception as e:
            st.error(f"⚠️ Error fetching {ticker}: {str(e)}")
            prices[ticker] = None
    return prices

# 🔥 Monitoring Logic
if st.session_state.monitoring:
    st.subheader("📊 Monitoring Stocks")
    st.write(f"**Time Frame:** {time_frame} sec | **Alert Threshold:** {percentage_change_threshold}%")

    alerts = []
    current_time = datetime.now()
    stock_prices = get_stock_prices(st.session_state.price_data.keys())

    # ✅ Display Real-time Data
    stock_display = st.empty()

    for ticker, latest_price in stock_prices.items():
        if latest_price is None:
            continue

        # Store price data
        st.session_state.price_data[ticker].append((current_time, latest_price))
        st.session_state.price_data[ticker] = st.session_state.price_data[ticker][-10:]

        # ✅ Ensure there's a valid old price before calculating percentage change
        if len(st.session_state.price_data[ticker]) > 1:
            old_price = st.session_state.price_data[ticker][0][1]
            if old_price and old_price > 0:
                percentage_change = ((latest_price - old_price) / old_price) * 100
                alert_key = f"{ticker}_{percentage_change:.2f}"

                # ✅ Trigger Alert if Condition is Met
                if abs(percentage_change) >= percentage_change_threshold and alert_key not in st.session_state.alerts:
                    st.session_state.alerts.add(alert_key)
                    alerts.append(f"🚨 {ticker}: {percentage_change:.2f}% change")

    # ✅ Show Alerts
    if alerts:
        for alert in alerts:
            st.toast(alert, icon="🚀")

    # ✅ Display Stock Percentage Changes
    with stock_display.container():
        st.subheader("📉 Stock Percentage Changes")
        for ticker, data in st.session_state.price_data.items():
            if len(data) > 1:
                old_price = data[0][1]
                latest_price = data[-1][1]
                if old_price and old_price > 0:
                    percentage_change = ((latest_price - old_price) / old_price) * 100
                    st.write(f"📌 **{ticker}: {percentage_change:.2f}% Change**")

    # ✅ Refresh for Real-time Updates **without crashing**
    time.sleep(time_frame)
    st.rerun()